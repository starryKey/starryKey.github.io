<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iOS内存管理之深拷贝与浅拷贝</title>
      <link href="/2020/10/25/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/10/25/iOS%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS内存管理之深拷贝和浅拷贝"><a href="#iOS内存管理之深拷贝和浅拷贝" class="headerlink" title="iOS内存管理之深拷贝和浅拷贝"></a>iOS内存管理之深拷贝和浅拷贝</h1><p>​    浅拷贝和深拷贝是一个很常见的问题，无论是在平时的开发过程中，还是在面试时，几乎都会遇到，当被问到该问题时，大部分的人都会回答说浅拷贝是指针的拷贝，深拷贝是内容的拷贝，这样回答当然没错，但如果被进一步问到浅拷贝和深拷贝是如何实现的呢？对象中的属性是如何拷贝的？集合的拷贝以及集合中的对象如何拷贝呢？等等，如果对以上的问题有些许疑惑，接下来我们一起探索一下。</p><p>​    首先，对象的拷贝涉及到两个方法<code>copy</code>和<code>mutableCopy</code>,    如果自定义的对象使用这个两个方法，首先需要遵守<code>NSCopying</code>、<code>NSMutableCopying</code>协议，并实现各自对应的方法<code>copyWithZone:</code>和<code>mutableCopyWithZone:</code>通过运行时的源码<code>NSObject.mm</code>中，可以了解到两者的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (id)copyWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    return (id)self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)copy &#123;</span><br><span class="line">    return [(id)self copyWithZone:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (id)mutableCopyWithZone:(struct _NSZone *)zone &#123;</span><br><span class="line">    return (id)self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)mutableCopy &#123;</span><br><span class="line">    return [(id)self mutableCopyWithZone:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>copy</code>和<code>mutableCopy</code>两个方法只是简单的调用了<code>copyWithZone:</code>和<code>mutableCopyWithZone:</code>。两者的区别<code>copy</code>方法用于复制对象的副本。通常来说，copy方法总是返回对象的不可修改的副本，即使对象本身是可修改的。例如，NSMutableString调用copy方法，将会返回不可修改的字符串对象。<code>mutableCopy</code>方法用于复制对象的可变副本。通常来说，<code>mutableCopy</code>方法总是返回对象可修改的副本，即使被复制的对象本身是不可修改的。</p><p><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectCopying.html" target="_blank" rel="noopener">Apple官方</a>针对浅拷贝和深拷贝的示意图如下：</p><p><img src="./../images/浅拷贝和深拷贝.png" alt="浅拷贝和深拷贝"></p><p>通过示意图可以初步了解到：浅拷贝的对象指向同一个地址，即指针的拷贝；深拷贝的对象指向不同的地址，即内容的拷贝。</p><p>Talk is cheap, show me the code.接下来通过具体的实践进一步了解分析<code>NSString</code>、<code>NSMutableString</code>以及自定义对象<code>TestModel</code>的拷贝:</p><h2 id="NSString"><a href="#NSString" class="headerlink" title="NSString"></a>NSString</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// NSString</span><br><span class="line">- (void)testStringCopy&#123;</span><br><span class="line">    NSString *str = @&quot;original value&quot;;</span><br><span class="line">    NSString *copyStr = [str copy];</span><br><span class="line">    NSMutableString *mutableCopyStr = [str mutableCopy];</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, str, str);</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, copyStr, copyStr);</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, mutableCopyStr, mutableCopyStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-10-24 13:43:08.105253+0800 内存管理[33986:1618628] 地址:0x10cdcd160 值:original value</span><br><span class="line">2020-10-24 13:43:08.105371+0800 内存管理[33986:1618628] 地址:0x10cdcd160 值:original value</span><br><span class="line">2020-10-24 13:43:08.105490+0800 内存管理[33986:1618628] 地址:0x600000433e10 值:original value</span><br></pre></td></tr></table></figure><h2 id="NSMutableString"><a href="#NSMutableString" class="headerlink" title="NSMutableString"></a>NSMutableString</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//NSMutableString</span><br><span class="line">- (void)testMutableCopy&#123;</span><br><span class="line">    NSMutableString *str = [NSMutableString stringWithString:@&quot;original value&quot;];</span><br><span class="line">    NSMutableString *copyStr = [str copy];</span><br><span class="line">    NSMutableString *mutableCopyStr = [str mutableCopy];</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, str, str);</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, copyStr, copyStr);</span><br><span class="line">    NSLog(@&quot;地址:%p 值:%@&quot;, mutableCopyStr, mutableCopyStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-10-24 13:43:08.105712+0800 内存管理[33986:1618628] 地址:0x600000439fb0 值:original value</span><br><span class="line">2020-10-24 13:43:08.105815+0800 内存管理[33986:1618628] 地址:0x600000a30820 值:original value</span><br><span class="line">2020-10-24 13:43:08.105939+0800 内存管理[33986:1618628] 地址:0x60000043a2e0 值:original value</span><br></pre></td></tr></table></figure><p>通过以上结果分析可知：</p><ul><li>非可变字符串<code>NSString</code>通过<code>copy</code>对象后，生成的对象与原对象指向同一个地址，属于浅拷贝；通过<code>mutableCopy</code>生成的对象与原对象指向不同的地址，属于深拷贝。</li><li>可变字符串<code>NSMutableString</code>无论是通过<code>copy</code>还是<code>mutableCopy</code>，生成的对象均指向不同的地址，属于深拷贝。</li></ul><h2 id="TestModel对象的拷贝"><a href="#TestModel对象的拷贝" class="headerlink" title="TestModel对象的拷贝"></a>TestModel对象的拷贝</h2><p>针对<code>TestModel</code>为测试对象的拷贝，以及对象的拷贝对其属性的影响。源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//TestModel.h</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface TestModel : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *title;</span><br><span class="line">@property (nonatomic, copy) NSMutableString *subTitle;</span><br><span class="line">@property (nonatomic, strong) NSArray *norArray;</span><br><span class="line">@property (nonatomic, strong) NSMutableArray *mutArray;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTitle:(NSString *)title subTitle:(NSMutableString *)subTitle norArray:(NSArray *)array mutArrry:(NSMutableArray *)mutArray;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">// TestModel.m</span><br><span class="line">#import &quot;TestModel.h&quot;</span><br><span class="line"></span><br><span class="line">@interface TestModel()&lt;NSCopying, NSMutableCopying&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation TestModel</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithTitle:(NSString *)title subTitle:(NSMutableString *)subTitle norArray:(NSArray *)array mutArrry:(NSMutableArray *)mutArray&#123;</span><br><span class="line">    if (self = [super init]) &#123;</span><br><span class="line">        _title = title;</span><br><span class="line">        _subTitle = subTitle;</span><br><span class="line">        _norArray = array;</span><br><span class="line">        _mutArray = mutArray;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id)copyWithZone:(nullable NSZone *)zone&#123;</span><br><span class="line">    TestModel *model = [[[self class] allocWithZone:zone] init];</span><br><span class="line">    model.title = [self.title copyWithZone:zone];       //同[self.title copy];</span><br><span class="line">    model.subTitle = [self.subTitle copyWithZone:zone]; //同[self.subTitle copy];</span><br><span class="line">    model.norArray = [self.norArray copyWithZone:zone]; //同[self.norArray copy];</span><br><span class="line">    model.mutArray = [self.mutArray copyWithZone:zone]; //同[self.mutArray copy];</span><br><span class="line">    return model;</span><br><span class="line">&#125;</span><br><span class="line">// 如果对象属性特别多的情况下，可以使用runtime实现，如下：</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">- (id)copyWithZone:(NSZone * )zone&#123;</span><br><span class="line">    id copyObject = [[[self class] allocWithZone:zone] init];</span><br><span class="line">    // 01:获取属性列表</span><br><span class="line">    unsigned int propertyCount = 0;</span><br><span class="line">    objc_property_t *propertyArray = class_copyPropertyList([self class], &amp;propertyCount);</span><br><span class="line">    for (int i = 0; i&lt; propertyCount; i++) &#123;</span><br><span class="line">        objc_property_t  property = propertyArray[i];</span><br><span class="line">        // 2.属性名字</span><br><span class="line">        const char * propertyName = property_getName(property);</span><br><span class="line">        NSString * key = [NSString stringWithUTF8String:propertyName];</span><br><span class="line">        // 3.通过属性名拿到属性值</span><br><span class="line">        id value=[self valueForKey:key];</span><br><span class="line">        NSLog(@&quot;name:%s,value:%@&quot;,propertyName,value);</span><br><span class="line">        // 4.判断值对象是否响应copyWithZone</span><br><span class="line">        if ([value respondsToSelector:@selector(copyWithZone:)]) &#123;</span><br><span class="line">            //5.设置属性值</span><br><span class="line">            [copyObject setValue:[value copy] forKey:key];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            [copyObject setValue:value forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //mark:需要手动释放</span><br><span class="line">    free(propertyArray);</span><br><span class="line">    return copyObject;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">- (id)mutableCopyWithZone:(NSZone *)zone&#123;</span><br><span class="line">    TestModel *model = [[[self class] allocWithZone:zone] init];</span><br><span class="line">    model.title = [self.title mutableCopyWithZone:zone];        // 同[self.title mutableCopy];</span><br><span class="line">    model.subTitle = [self.subTitle mutableCopyWithZone:zone];  // 同[self.subTitle  mutableCopy];</span><br><span class="line">    model.norArray = [self.norArray mutableCopyWithZone:zone];  // 同[self.norArray mutableCopy];</span><br><span class="line">    model.mutArray = [self.mutArray mutableCopyWithZone:zone];  // 同[self.mutArray mutableCopy];</span><br><span class="line">    return model;</span><br><span class="line">&#125;</span><br><span class="line">// 如果对象属性特别多的情况下，可以使用runtime实现，如下：</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">- (id)mutableCopyWithZone:(NSZone *)zone&#123;</span><br><span class="line">    id mutableCopyObj = [[[self class]allocWithZone:zone] init];</span><br><span class="line">    //1.获取属性列表</span><br><span class="line">    unsigned int count = 0;</span><br><span class="line">    objc_property_t* propertylist = class_copyPropertyList([self class], &amp;count);</span><br><span class="line">    for (int i = 0; i &lt; count ; i++) &#123;</span><br><span class="line">        objc_property_t property = propertylist[i];</span><br><span class="line">        //2.获取属性名</span><br><span class="line">        const char * propertyName = property_getName(property);</span><br><span class="line">        NSString * key = [NSString stringWithUTF8String:propertyName];</span><br><span class="line">        //3.获取属性值</span><br><span class="line">        id value = [self valueForKey:key];</span><br><span class="line">        //4.判断属性值对象是否遵守NSMutableCopying协议</span><br><span class="line">        if ([value respondsToSelector:@selector(mutableCopyWithZone:)]) &#123;</span><br><span class="line">            //5.设置对象属性值</span><br><span class="line">            [mutableCopyObj setValue:[value mutableCopy] forKey:key];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            [mutableCopyObj setValue:value forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //mark:需要手动释放</span><br><span class="line">    free(propertylist);</span><br><span class="line">    return mutableCopyObj;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- (void)testCustomObject&#123;</span><br><span class="line">    NSMutableArray *mutableArray = [NSMutableArray array];</span><br><span class="line">    TestModel *model = [[TestModel alloc] initWithTitle:@&quot;title&quot; subTitle:[NSMutableString stringWithString:@&quot;subTitle&quot;] norArray:@[@&quot;test1&quot;, @&quot;test2&quot;] mutArrry:mutableArray];</span><br><span class="line">    TestModel *copyModel = [model copy];</span><br><span class="line">    TestModel *mutableModel = [model mutableCopy];</span><br><span class="line">    // 测试对象的拷贝</span><br><span class="line">    NSLog(@&quot;******TestModel内存地址******&quot;);</span><br><span class="line">    NSLog(@&quot;原始地址：%p&quot;, model);</span><br><span class="line">    NSLog(@&quot;copy地址：%p&quot;, copyModel);</span><br><span class="line">    NSLog(@&quot;mutableCopy地址：%p&quot;, mutableModel);</span><br><span class="line">    // 测试对象拷贝对NSString类型属性的影响</span><br><span class="line">    NSLog(@&quot;******  属性title(NSString)内存地址  ******&quot;);</span><br><span class="line">    NSLog(@&quot;原始地址：%p&quot;, model.title);</span><br><span class="line">    NSLog(@&quot;copy地址：%p&quot;, copyModel.title);</span><br><span class="line">    NSLog(@&quot;mutableCopy地址：%p&quot;, mutableModel.title);</span><br><span class="line">    // 测试对象拷贝对NSMutableString类型属性的影响</span><br><span class="line">    NSLog(@&quot;****** 属性subTitle(NSMutableString)内存地址 ******&quot;);</span><br><span class="line">    NSLog(@&quot;原始地址：%p&quot;, model.subTitle);</span><br><span class="line">    NSLog(@&quot;copy地址：%p&quot;, copyModel.subTitle);</span><br><span class="line">    NSLog(@&quot;mutableCopy地址：%p&quot;, mutableModel.subTitle);</span><br><span class="line">    // 测试对象拷贝对非可变集合类型属性的影响</span><br><span class="line">    NSLog(@&quot;****** 属性norArray(NSArray)内存地址 ******&quot;);</span><br><span class="line">    NSLog(@&quot;原始地址：%p&quot;, model.norArray);</span><br><span class="line">    NSLog(@&quot;copy地址：%p&quot;, copyModel.norArray);</span><br><span class="line">    NSLog(@&quot;mutableCopy地址：%p&quot;, mutableModel.norArray);</span><br><span class="line">    // 测试对象拷贝对可变几何类型属性的影响</span><br><span class="line">    NSLog(@&quot;****** 属性mutArrry(NSMutableArray)内存地址 ******&quot;);</span><br><span class="line">    NSLog(@&quot;原始地址：%p&quot;, model.mutArray);</span><br><span class="line">    NSLog(@&quot;copy地址：%p&quot;, copyModel.mutArray);</span><br><span class="line">    NSLog(@&quot;mutableCopy地址：%p&quot;, mutableModel.mutArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">2020-10-25 15:40:28.564704+0800 内存管理[39368:1919107] ******TestModel内存地址******</span><br><span class="line">2020-10-25 15:40:28.564882+0800 内存管理[39368:1919107] 原始地址：0x600000eaa400</span><br><span class="line">2020-10-25 15:40:28.564988+0800 内存管理[39368:1919107] copy地址：0x600000eaa370</span><br><span class="line">2020-10-25 15:40:28.565097+0800 内存管理[39368:1919107] mutableCopy地址：0x600000eaa100</span><br><span class="line"></span><br><span class="line">2020-10-25 15:40:28.565191+0800 内存管理[39368:1919107] ******  属性title(NSString)内存地址  ******</span><br><span class="line">2020-10-25 15:40:28.565468+0800 内存管理[39368:1919107] 原始地址：0x10e8f5188</span><br><span class="line">2020-10-25 15:40:28.565923+0800 内存管理[39368:1919107] copy地址：0x10e8f5188</span><br><span class="line">2020-10-25 15:40:28.566376+0800 内存管理[39368:1919107] mutableCopy地址：0x8356f4dfe5d0308a</span><br><span class="line"></span><br><span class="line">2020-10-25 15:40:28.566881+0800 内存管理[39368:1919107] ****** 属性subTitle(NSMutableString)内存地址 ******</span><br><span class="line">2020-10-25 15:40:28.569415+0800 内存管理[39368:1919107] 原始地址：0x600000eaa430</span><br><span class="line">2020-10-25 15:40:28.578373+0800 内存管理[39368:1919107] copy地址：0x8355e20852d2afc7</span><br><span class="line">2020-10-25 15:40:28.578531+0800 内存管理[39368:1919107] mutableCopy地址：0x8355e20852d2afc7</span><br><span class="line"></span><br><span class="line">2020-10-25 15:40:28.578646+0800 内存管理[39368:1919107] ****** 属性norArray(NSArray)内存地址 ******</span><br><span class="line">2020-10-25 15:40:28.578771+0800 内存管理[39368:1919107] 原始地址：0x6000000a9780</span><br><span class="line">2020-10-25 15:40:28.579093+0800 内存管理[39368:1919107] copy地址：0x6000000a9780</span><br><span class="line">2020-10-25 15:40:28.579223+0800 内存管理[39368:1919107] mutableCopy地址：0x600000eaa310</span><br><span class="line"></span><br><span class="line">2020-10-25 15:40:28.579318+0800 内存管理[39368:1919107] ****** 属性mutArrry(NSMutableArray)内存地址 ******</span><br><span class="line">2020-10-25 15:40:28.579674+0800 内存管理[39368:1919107] 原始地址：0x600000eaa0d0</span><br><span class="line">2020-10-25 15:40:28.580027+0800 内存管理[39368:1919107] copy地址：0x7fff8062cc40</span><br><span class="line">2020-10-25 15:40:28.580466+0800 内存管理[39368:1919107] mutableCopy地址：0x600000eaa3d0</span><br></pre></td></tr></table></figure><p>通过以上测试可以发现：</p><ul><li>针对对象的拷贝，无论是<code>copy</code>还是<code>mutableCopy</code>都会产生新的对象，均为深拷贝。</li><li>对象中的属性，遵循可变类型的属性无论是<code>copy</code>还是<code>mutableCopy</code>都会产生新的对象，均为深拷贝；非可变类型的属性，<code>copy</code>时没有产生新的对象，为指针拷贝，即浅拷贝；<code>mutableCopy</code>时产生新的对象，为内容拷贝，即深拷贝。</li></ul><h2 id="集合的的拷贝"><a href="#集合的的拷贝" class="headerlink" title="集合的的拷贝"></a>集合的的拷贝</h2><p>针对集合的拷贝，<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html" target="_blank" rel="noopener">Apple官方</a>给的示意图如下：</p><p><img src="/Users/wol/Desktop/公众号/内容篇/iOS/images/集合的深浅拷贝.png" alt="集合的深浅拷贝"></p><p>之所以将集合对象拿出来单独处理，原因在于集合中会包含很多的对象，这些对象也需要区分深拷贝与浅拷贝，更深一些，集合中也可能包含集合对象，如此一来，显得更加麻烦。接下来将以<code>NSArray</code>的深拷贝与浅拷贝，将集合的深浅拷贝分为四种情况进一步了解：</p><h3 id="1、浅拷贝"><a href="#1、浅拷贝" class="headerlink" title="1、浅拷贝"></a>1、浅拷贝</h3><p><strong>代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *oriArr = [NSArray arrayWithObjects:@&quot;test&quot;, nil];</span><br><span class="line">NSArray *copyArr = [oriArr copy];</span><br><span class="line">NSLog(@&quot;%p&quot;, oriArr);</span><br><span class="line">NSLog(@&quot;%p&quot;, copyArr);</span><br></pre></td></tr></table></figure><p><strong>日志分析：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 通过日志分析可以确定为浅拷贝</span><br><span class="line">2020-10-25 16:59:33.093252+0800 内存管理[39941:1967202] 0x600002fafa60</span><br><span class="line">2020-10-25 16:59:33.093358+0800 内存管理[39941:1967202] 0x600002fafa60</span><br></pre></td></tr></table></figure><h3 id="2、单层深拷贝"><a href="#2、单层深拷贝" class="headerlink" title="2、单层深拷贝"></a>2、单层深拷贝</h3><p>单层深拷贝指的是对<code>NSArray</code>对象的深拷贝，并非对其内部的元素进行处理。</p><p><strong>代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSArray *oriArr = [NSArray arrayWithObjects:@&quot;test&quot;, nil];</span><br><span class="line">NSMutableArray *mutArr = [oriArr mutableCopy];</span><br><span class="line">NSLog(@&quot;%p&quot;, oriArr);</span><br><span class="line">NSLog(@&quot;%p&quot;, mutArr);</span><br><span class="line">//内部元素</span><br><span class="line">NSLog(@&quot;%p&quot;, oriArr[0]);</span><br><span class="line">NSLog(@&quot;%p&quot;, mutArr[0]);</span><br></pre></td></tr></table></figure><p><strong>日志分析：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 通过日志分析可以发现，NSArray对象通过mutableCopy进行了深拷贝，但是其内部元素并没有完全深拷贝，因此称为单层深拷贝</span><br><span class="line">2020-10-25 17:08:32.338871+0800 内存管理[40113:1978516] 0x60000223cb60</span><br><span class="line">2020-10-25 17:08:32.338960+0800 内存管理[40113:1978516] 0x600002c5d380</span><br><span class="line">2020-10-25 17:08:32.339046+0800 内存管理[40113:1978516] 0x10af9b4e8</span><br><span class="line">2020-10-25 17:08:32.339134+0800 内存管理[40113:1978516] 0x10af9b4e8</span><br></pre></td></tr></table></figure><h3 id="3、双层深拷贝"><a href="#3、双层深拷贝" class="headerlink" title="3、双层深拷贝"></a>3、双层深拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (void)testCollectionCopy&#123; </span><br><span class="line">// 创建</span><br><span class="line">    NSMutableString *mutString1 = [NSMutableString stringWithString:@&quot;test1&quot;];</span><br><span class="line">    NSMutableString *mutString2 = [NSMutableString stringWithString:@&quot;test2&quot;];</span><br><span class="line">    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutString2, nil];</span><br><span class="line">    NSArray *testArr = [NSArray arrayWithObjects:mutString1, mutableArr, nil];</span><br><span class="line">    //通过官方文档提供的方式进行创建copy</span><br><span class="line">    NSArray *testArrCopy = [[NSArray alloc] initWithArray:testArr copyItems:YES];</span><br><span class="line">    //testArr和testArrCopy进行对比</span><br><span class="line">    NSLog(@&quot;===我是分割线01===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class="line">    </span><br><span class="line">    //testArr和testArrCopy中元素指针对比</span><br><span class="line">    //mutableString对比</span><br><span class="line">    NSLog(@&quot;===我是分割线02===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class="line">    </span><br><span class="line">    //mutableArr对比</span><br><span class="line">    NSLog(@&quot;===我是分割线03===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class="line">    </span><br><span class="line">    //mutableArr中元素对比，即mutString2进行对比</span><br><span class="line">    NSLog(@&quot;===我是分割线04===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-10-25 17:35:01.731301+0800 内存管理[40436:1999803] ===我是分割线01===</span><br><span class="line">2020-10-25 17:35:01.734516+0800 内存管理[40436:1999803] 0x60000147a2c0</span><br><span class="line">2020-10-25 17:35:01.734661+0800 内存管理[40436:1999803] 0x60000147a2e0</span><br><span class="line">2020-10-25 17:35:01.734784+0800 内存管理[40436:1999803] ===我是分割线02===</span><br><span class="line">2020-10-25 17:35:01.734964+0800 内存管理[40436:1999803] 0x600001a528b0</span><br><span class="line">2020-10-25 17:35:01.735420+0800 内存管理[40436:1999803] 0x87c4312271f96ce5</span><br><span class="line">2020-10-25 17:35:01.735838+0800 内存管理[40436:1999803] ===我是分割线03===</span><br><span class="line">2020-10-25 17:35:01.736861+0800 内存管理[40436:1999803] 0x600001a52550</span><br><span class="line">2020-10-25 17:35:01.738048+0800 内存管理[40436:1999803] 0x600001627300</span><br><span class="line">2020-10-25 17:35:01.738733+0800 内存管理[40436:1999803] ===我是分割线04===</span><br><span class="line">2020-10-25 17:35:01.738939+0800 内存管理[40436:1999803] 0x600001a524c0</span><br><span class="line">2020-10-25 17:35:01.739575+0800 内存管理[40436:1999803] 0x600001a524c0</span><br></pre></td></tr></table></figure><p>通过以上日志可以发现：copy后，只有mutableArr中的mutalbeString2指针地址没有变化。而testArr的指针和testArr中的mutableArr、mutableString1的指针地址均发生变化，所以称之为双层深复制。</p><p><strong>限制</strong></p><p>initWithArray: copyItems:会使NSArray中元素均执行copy方法，这也是在testArr中放入NSMutableArray和NSMutableString的原因。如果放入的是NSArray或者NSString，执行copy后，只会发生指针复制；如果放入的是未实现NSCopying协议的对象，调用这个方法甚至会crash。</p><h3 id="4、完全深拷贝"><a href="#4、完全深拷贝" class="headerlink" title="4、完全深拷贝"></a>4、完全深拷贝</h3><p>如果想完美的解决NSArray嵌套NSArray这种情形，可以使用归档、解档的方式。</p><p><strong>代码如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (void)testDeepCopyCollection&#123;</span><br><span class="line">    NSMutableString *mutString1 = [NSMutableString stringWithString:@&quot;test1&quot;];</span><br><span class="line">    NSMutableString *mutString2 = [NSMutableString stringWithString:@&quot;test1&quot;];</span><br><span class="line">    NSMutableArray *mutableArr = [NSMutableArray arrayWithObjects:mutString2, nil];</span><br><span class="line">    NSArray *testArr = [NSArray arrayWithObjects:mutString1, mutableArr, nil];</span><br><span class="line">    //通过归档、解档的方式创建copy</span><br><span class="line">    NSArray *testArrCopy = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:testArr]];</span><br><span class="line">    //testArr和testArrCopy进行对比</span><br><span class="line">    NSLog(@&quot;===我是分割线01===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy);</span><br><span class="line">   </span><br><span class="line">    //testArr和testArrCopy中元素指针对比</span><br><span class="line">    //mutableString对比</span><br><span class="line">    NSLog(@&quot;===我是分割线02===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[0]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[0]);</span><br><span class="line">   </span><br><span class="line">    //mutableArr对比</span><br><span class="line">    NSLog(@&quot;===我是分割线03===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[1]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[1]);</span><br><span class="line">   </span><br><span class="line">    //mutableArr中元素对比，即mutalbeString2进行对比</span><br><span class="line">    NSLog(@&quot;===我是分割线04===&quot;);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArr[1][0]);</span><br><span class="line">    NSLog(@&quot;%p&quot;, testArrCopy[1][0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2020-10-25 21:14:30.738233+0800 内存管理[41176:2082596] ===我是分割线01===</span><br><span class="line">2020-10-25 21:14:30.738370+0800 内存管理[41176:2082596] 0x60000173a480</span><br><span class="line">2020-10-25 21:14:30.738475+0800 内存管理[41176:2082596] 0x60000173a660</span><br><span class="line">2020-10-25 21:14:30.738575+0800 内存管理[41176:2082596] ===我是分割线02===</span><br><span class="line">2020-10-25 21:14:30.738670+0800 内存管理[41176:2082596] 0x600001950780</span><br><span class="line">2020-10-25 21:14:30.738766+0800 内存管理[41176:2082596] 0x600001950990</span><br><span class="line">2020-10-25 21:14:30.738965+0800 内存管理[41176:2082596] ===我是分割线03===</span><br><span class="line">2020-10-25 21:14:30.745114+0800 内存管理[41176:2082596] 0x6000019507e0</span><br><span class="line">2020-10-25 21:14:30.745286+0800 内存管理[41176:2082596] 0x600001950a50</span><br><span class="line">2020-10-25 21:14:30.745426+0800 内存管理[41176:2082596] ===我是分割线04===</span><br><span class="line">2020-10-25 21:14:30.745631+0800 内存管理[41176:2082596] 0x6000019507b0</span><br><span class="line">2020-10-25 21:14:30.745943+0800 内存管理[41176:2082596] 0x600001950a80</span><br></pre></td></tr></table></figure><p>通过以上日志发现，<code>testArr</code>和<code>testArrCopy</code>中的元素以及集合中集合的指针完全不同，所以完成了深拷贝。</p><p><strong>限制</strong></p><p>归档和解档的前提是NSArray中所有的对象都实现了NSCoding协议。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是关于深拷贝和浅拷贝的一些探究，概括为浅拷贝为指针的复制，不会创建一个对象；深拷贝为内容的复制，会创建一个新的对象，集合的拷贝需要多加注意，以免引起一些问题。在平时的项目开发中，需要根据需要而决定使用深拷贝还是浅拷贝。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档:"></a>参考文档:</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectCopying.html" target="_blank" rel="noopener">对象的拷贝</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html" target="_blank" rel="noopener">集合的拷贝</a></li><li><a href="https://www.jianshu.com/p/ebbac2fec4c6" target="_blank" rel="noopener">iOS Copy</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode小技巧之Snippet</title>
      <link href="/2020/09/20/Xcode%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8BSnippet/"/>
      <url>/2020/09/20/Xcode%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8BSnippet/</url>
      
        <content type="html"><![CDATA[<p>Xcode中有许多小功能，可能经常被使用到，但是却没被发觉，如<code>Xcode Snippets</code>。</p><p>在敲代码时，经常会遇到刚敲几个字母就会有相应的提示，点击<code>enter</code>选中时，代码段立即显示出来，再根据对应的提示进行代码编写，极大地提升了代码的编程效率，如：</p><p><img src="./../images/snippet01.png" alt="snippet"></p><p>带有<code>{}</code>图标的均代表有该操作，只需输入几个单词就能完成如下代码的编写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    &lt;#code to be executed once#&gt;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上实例就是<code>Xcode Snippets</code>的应用，这是Xcode自带的一些<code>Code Snippet</code>，我们也可以自定义接下来将通过一些实例自定义一些常见的<code>Code Snippet</code>。</p><h2 id="查找Code-Snippet"><a href="#查找Code-Snippet" class="headerlink" title="查找Code Snippet"></a>查找<code>Code Snippet</code></h2><p>Xcode中默认自带一些常见的<code>Code Snippet</code>，通过以下方式可以快速打开<code>Code Snippet</code>:</p><ul><li>1、快捷键<code>cmd + shift + L</code></li><li><p>2、点击Xcode右上角的工具栏中的<code>+</code>,如下图所示：</p><p>  <img src="./../images/snippet02.png" alt="snippet"></p></li></ul><p>按照上述其中之一操作后，即可显示如下界面：</p><p><img src="./../images/snippet03.png" alt="snippet"></p><p>通过输入对应的字段即可查找相关的<code>Code Snippet</code>.</p><h2 id="新增自定义Code-Snippet"><a href="#新增自定义Code-Snippet" class="headerlink" title="新增自定义Code Snippet"></a>新增自定义<code>Code Snippet</code></h2><p>在Xcode中，通过在源文件中右键，并点击<code>Create Code Snippet</code>,即可快速创建代码段，如下图所示：</p><p><img src="./../images/snippet04.png" alt="snippet"></p><p>打开面板后，通过输入对应的name、Completion,即可完成代码段的新建，如下图所示：</p><p><img src="./../images/snippet05.png" alt="snippet"></p><p>其中<code>Completion</code>代表代码段的简写，通过在编码时快速输入该简写，达到展示代码段的目的，如下所示：</p><p><img src="./../images/snippet06.png" alt="snippet"></p><h2 id="自定义常见的Code-Snippet"><a href="#自定义常见的Code-Snippet" class="headerlink" title="自定义常见的Code Snippet"></a>自定义常见的<code>Code Snippet</code></h2><p>可以将平时用经常用到，但又都是大量重读性的代码自定义成代码段，提高编写效率。如常见的属性声明、固定值等</p><p><strong>01、属性声明：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//Strong</span><br><span class="line">@property (nonatomic, strong) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class="line">//Weak</span><br><span class="line">@property (nonatomic, weak) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class="line">//assign</span><br><span class="line">@property (nonatomic, assign) &lt;#Class#&gt; &lt;#property#&gt;;</span><br><span class="line">//copy</span><br><span class="line">@property (nonatomic, copy) NSString *&lt;#string#&gt;;</span><br><span class="line">//delegate</span><br><span class="line">@property (nonatomic, weak) id&lt;&lt;#protocol#&gt;&gt; &lt;#delegate#&gt;;</span><br><span class="line">//Block声明</span><br><span class="line">@property (nonatomic, copy) &lt;#returnType#&gt;(^&lt;#blockName#&gt;)(&lt;#arguments#&gt;);</span><br></pre></td></tr></table></figure><p><strong>02、固定值</strong><br>罗列部分，根据需要增加</p><table><thead><tr><th>含义</th><th>Completion</th><th>代码段</th></tr></thead><tbody><tr><td>屏幕宽度</td><td>ksw</td><td>[UIScreen mainScreen].bounds.size.width;</td></tr><tr><td>屏幕高度</td><td>ksh</td><td>[UIScreen mainScreen].bounds.size.height;</td></tr></tbody></table><p><strong>03、单例</strong></p><h2 id="共享代码段"><a href="#共享代码段" class="headerlink" title="共享代码段"></a>共享代码段</h2><p>针对自定义的一些代码段会被存放在<code>~/Library/Developer/Xcode /UserData/CodeSnippets/</code>目录下，可以备份对应的文件，以便切换电脑时复用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac上使用Hexo搭建博客</title>
      <link href="/2020/09/16/hello-world/"/>
      <url>/2020/09/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac上使用Hexo搭建博客"><a href="#Mac上使用Hexo搭建博客" class="headerlink" title="Mac上使用Hexo搭建博客"></a>Mac上使用Hexo搭建博客</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>安装<code>node.js</code></li><li>安装<code>Git</code><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2>终端中执行如下命令进行安装:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，执行如下命令，Hexo将会在指定的文件夹下创建所需的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><p>使用如下命令下载主题,如next主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd themes/</span><br><span class="line">git init</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next.git</span><br></pre></td></tr></table></figure></p><h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><ul><li><p>启动服务</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>创建新文章</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br><span class="line">执行完后，Hexo\source_posts中多了一个文件博名.md，也可直接进入Hexo\source_posts中创建.md文件</span><br></pre></td></tr></table></figure></li><li><p>生成静态资源</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p>发布博文</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>清理</p><pre><code>hexo clean</code></pre></li><li>快捷指令<ul><li>hexo g == hexo generate</li><li>hexo d == hexo deploy</li><li>hexo s == hexo server</li><li>hexo n == hexo new  </li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>数据结构是指同一数据对象中各数据元素间存在的关系。算法是解决某一特定类型问题的有限运算序列，算法的实现必须借助程序设计语言中提供的数据类型及其运算。一个算法的效率往往与数据的表现形式有关，因此数据结构的选择对数据处理的效率起着至关重要的作用。</p><h1 id="基础入门篇"><a href="#基础入门篇" class="headerlink" title="基础入门篇"></a>基础入门篇</h1><p>作为一名iOSer，综合考虑了下，决定还是选择Swift作为学习算法的主要语言。一方面有Swift语言基础，能够减少算法学习的前期准备成本，另一方面，通过算法的练习，提升对Swift语言的熟练度。</p><h2 id="Swift语言入门"><a href="#Swift语言入门" class="headerlink" title="Swift语言入门"></a>Swift语言入门</h2><p><strong>基础语法</strong></p><p><a href="https://swiftgg.gitbook.io/swift/" target="_blank" rel="noopener">SwiftGG-The Swift Programming Language</a></p><h1 id="数据结构篇"><a href="#数据结构篇" class="headerlink" title="数据结构篇"></a>数据结构篇</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是最基本的数据结构，可以在内存中连续存储多个相同元素，在内存中的分配也是连续的，数组中的元素通过下标进行访问，下标从0开始。在Swift中，将OC时代的NSMutableArray和NSArray统一归为Array。虽然看上去只有一种数据结构，但是它的实现其实有三种：</p><ul><li><p><strong>ContiguousArray<element></element></strong>：是一个比较特殊的数组，会将对应的数组存储在连续的内存区域中。如果存储的元素是结构体或枚举（值类型，栈上操作），那么<code>Array</code>和<code>ContiguousArray</code>的效率相似；如果数组中存储的元素是对象（<code>class</code>或<code>@objc</code>），而且不需要将数组桥接到Array或者传递给<code>Objective-C</code>的<code>API</code>时，那么<code>ContiguousArray</code>比<code>Array</code>更高效，而且拥有更多可预测的性能。</p></li><li><p><strong>Array<element></element></strong>：当存储值类型时，性能和<code>ContiguousArray</code>无差别，而且内存是连续的。但是如果存储的是对象（<code>class</code>或<code>@objc</code>），则会自动桥接到<code>Objective-C</code>中的<code>NSArray</code>。</p></li><li><p><strong>ArraySlice<element></element></strong>：不是数组，而是数组片段，与原数组享用同一区域，不创建新的存储空间。但是，修改ArraySlice中的元素时，不会影响到原数组。</p></li></ul><h3 id="数组中的count和capacity"><a href="#数组中的count和capacity" class="headerlink" title="数组中的count和capacity"></a>数组中的count和capacity</h3><p>Swift中Array的count属性用于描述数组中元素的个数，而capacity用于描述数组的容量，即不分配新存储空间的数组可以包含的元素总数。如果要向数组中增加元素，并且超过其容量，则该数组必须增加其容量。为了提高数组的扩容效率，数组的容量的大小都是成倍增长，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class="line">print(cArr.count)       // 2</span><br><span class="line">print(cArr.capacity)    // 2</span><br><span class="line">cArr.append(1)</span><br><span class="line">print(cArr.capacity)    // 4</span><br><span class="line">cArr.append(2)</span><br><span class="line">print(cArr.capacity)    // 4</span><br><span class="line">cArr.append(3)</span><br><span class="line">print(cArr.capacity)    // 8        </span><br><span class="line">// 当调用removeAll时，数组的所有空间被释放</span><br><span class="line">cArr.removeAll()</span><br><span class="line">print(cArr.count)       // 0</span><br><span class="line">print(cArr.capacity)    // 0</span><br></pre></td></tr></table></figure><p>由于Swift数组将其元素连续存储在内存中，因此必须通过通过重新分配其内部存储，并且将所有元素从原先的存储中复制到新的存储中。如果事先知道需要向数组汇总添加多少个元素，则可使用<code>reserveCapacity</code>方法来预设数组中的容量，以减少数组<code>capacity</code>变化带来的影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class="line">cArr.reserveCapacity(10) // 10</span><br></pre></td></tr></table></figure><p>通常无需担心数组容量的问题，重新分配很少影响性能问题，Swift使用有效的重新分配方式，以便重新分配的数组在最终计数中为对数。但是如果数组非常大（例如，Mac上为千兆字节或iOS设备上为数十兆字节），或者对性能敏感的数据存入数组（音频缓冲区，需要几秒内播放），则需要考虑使用reserveCapacity避免重新分配。</p><h4 id="ArraySlice注意点"><a href="#ArraySlice注意点" class="headerlink" title="ArraySlice注意点"></a>ArraySlice注意点</h4><p>ArraySlice是Array，ContiguousArray的一个切片或ArraySlice实例。ArraySlice并没有将切片的元素拷贝到新的内存中。修改ArraySlice中的值不会引起原数组的改变，同样，原数组的值修改，也不会引起ArraySlice的变化。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let testArr = Array(1...7)</span><br><span class="line">let middle = testArr.count / 2</span><br><span class="line">var firstHalf = testArr[..&lt;middle]</span><br><span class="line">let secondHalf = testArr[middle...]</span><br><span class="line">firstHalf[0] = 10</span><br><span class="line">print(secondHalf.startIndex) // 3</span><br><span class="line">print(testArr)               // [1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">print(firstHalf)             // [10, 2, 3]</span><br><span class="line">testArr[0] = 20</span><br><span class="line">print(firstHalf)             // [10, 2, 3]</span><br><span class="line">print(testArr)               // [20, 2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><p>ArraySlice的索引并总是从0开始,而是按照原数据中的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(secondHalf.startIndex) // 3</span><br><span class="line">print(secondHalf[0])  // Fatal error: Index out of bounds</span><br></pre></td></tr></table></figure><blockquote><p>Apple官方文档中指出不建议长期存储实例。因为即使原始数组的生命周期结束后，切片也会保留对较大数组整个存储的引用，而不仅仅是对其呈现的部分的引用。因此，切片的长期存储可能会延长原本无法访问的元素的寿命，这些元素似乎是内存和对象泄漏。</p></blockquote><h3 id="数组中的常见操作"><a href="#数组中的常见操作" class="headerlink" title="数组中的常见操作"></a>数组中的常见操作</h3><ul><li><p>数组的声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个可变数组</span><br><span class="line">var arr1 = Array&lt;Int&gt;()</span><br><span class="line">var arr2 = [Int]()    //推荐使用</span><br><span class="line">// 声明一个不可修改的数组</span><br><span class="line">let arr3 = [1,2,3]</span><br><span class="line">let arr4 = [Int](repeating: 0, count: 3)</span><br></pre></td></tr></table></figure></li><li><p>增加一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1.append(1)</span><br><span class="line">或</span><br><span class="line">arr1 += [1]</span><br></pre></td></tr></table></figure></li><li><p>删除一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1.remove(at: 0)</span><br></pre></td></tr></table></figure></li><li><p>修改一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr1[1] = 6</span><br></pre></td></tr></table></figure></li><li><p>取出一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var value = arr1[0]</span><br></pre></td></tr></table></figure></li><li><p>遍历</p></li></ul><p>常用方式一：<strong>forEach</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1.forEach &#123; (value) in</span><br><span class="line">    print(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方式二：<strong>for…in</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">for i in 0..&lt;arr1.count - 1 &#123;</span><br><span class="line">    print(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 枚举遍历</span><br><span class="line">for (index, value) in arr1.enumerated() &#123;</span><br><span class="line">    print(&quot;\(index): &apos;\(value)&apos;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>区别：</p><h2 id="字典与集合"><a href="#字典与集合" class="headerlink" title="字典与集合"></a>字典与集合</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h1 id="基础算法篇"><a href="#基础算法篇" class="headerlink" title="基础算法篇"></a>基础算法篇</h1><p>二分查找，排序算法， 动态规划</p><h1 id="算法思维篇"><a href="#算法思维篇" class="headerlink" title="算法思维篇"></a>算法思维篇</h1><p>数据结构和算法思维的目的都是为了降低时间复杂度。数据结构是从数据组织形式的角度去达成这个目标，而算法思维则是从数据处理的思路上去达成这个目标。如果数据处理的逻辑上出现缺陷，即使通过高效的数据处理解决了问题，但是会产生很多无效的计算，造成时间浪费。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote><p>排序是指让一组无序数据变成有序的过程，一般默认有序为从小到大的排列顺序。</p></blockquote><p><strong>衡量排序算法优劣的方式</strong></p><ul><li>时间复杂度<ul><li>包括最好时间复杂度、最坏时间复杂度和平均时间复杂度。</li></ul></li><li>空间复杂度<ul><li>如果空间复杂度为1，也称为原地排序。</li></ul></li><li>稳定性<ul><li>指相等的数据对象，在排序后，顺序是否保持不变。</li></ul></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>原理</strong><br>从第一个数据开始，依次比较相邻元素的大小，如果前者大于后者，这交换两个元素的位置，将大的元素排到后面，通过多轮迭代，直到不用交换为止。</p><p><strong>性能</strong></p><ul><li><strong>时间复杂度</strong><ul><li>最好时间复杂度：<strong>O(n)</strong><ul><li>即当数据刚好是顺序排序时，只要挨个比较一般即可。</li></ul></li><li>最坏时间复杂度：<strong>O(n*n)</strong><ul><li>即当数据刚好逆序时，每轮排序都需要比较n次，并且重复n次。</li></ul></li><li>平均时间复杂度: <strong>O(n*n)</strong><ul><li>即数据杂乱无章时</li></ul></li></ul></li><li><strong>空间复杂度</strong><ul><li><strong>O(1)</strong>：不占用额外的空间</li></ul></li></ul><p><strong>代码实现</strong><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 冒泡排序(Swift)</span><br><span class="line">func bubbleSort() &#123;</span><br><span class="line">    var list = [-1,2,4,1,0,9,6,7]</span><br><span class="line">    for i in 1..&lt;list.count &#123;</span><br><span class="line">        for j in 0..&lt;(i - 1) &#123;</span><br><span class="line">            if list[j] &gt; list[j + 1] &#123;</span><br><span class="line">                let temp = list[j]</span><br><span class="line">                list[j] = list[j + 1]</span><br><span class="line">                list[j+1] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>原理</strong><br>选取未排序的数据插入到已排序区间的合适位置，直到未排序区间为空。</p><p><strong>性能</strong></p><ul><li><strong>时间复杂度</strong><ul><li>最好时间复杂度：<strong>O(n)</strong><ul><li>即当数据刚好是顺序排序时，每次只用比较一次就能找到正确的位置。</li></ul></li><li>最坏时间复杂度：<strong>O(n*n)</strong><ul><li>即当数据刚好完全逆序时，每轮排序都需要比较n次才能找到正确的位置区间。</li></ul></li><li>平均时间复杂度: <strong>O(n*n)</strong><ul><li>因为往数组中插入一个元素的平均时间复杂度为O(n),而插入排序可以理解为重复n次的数组插入操作</li></ul></li></ul></li><li><strong>空间复杂度</strong><ul><li><strong>O(1)</strong>：不占用额外的空间。</li></ul></li></ul><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><ul><li>二分查找的时间复杂度是O(logn)。</li><li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。因此编码的时候，多数采用while循环加break跳出代码结构。</li><li>二分查找处理的原问题必须是有序的。</li></ul><h3 id="二叉树搜索"><a href="#二叉树搜索" class="headerlink" title="二叉树搜索"></a>二叉树搜索</h3><h2 id="递归思维"><a href="#递归思维" class="headerlink" title="递归思维"></a>递归思维</h2><blockquote><p>递归是指在函数的定义中使用函数自身的方法，即自己调用自己。递归的基本思想就是把规模大的问题转化为规模小的相同的子问题来解决。递归的实现包含两部分，一是递归主体，而是终止条件。</p></blockquote><p>递归的数学模型是<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95" target="_blank" rel="noopener">数学归纳法</a>。当一个问题满足如下的两个条件时，就可以使用递归的方法求解：</p><ul><li>1、可以拆解为除了数据规模之外，求解思路完全相同的方法求解；</li><li>2、存在终止条件。</li></ul><p>递归的核心思想是把规模大的问题转化为规模小的相似的子问题来解决。<br>例子：通过递归求解汉诺塔问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func hannio(n: Int, x: String, y: String, z: String) &#123;</span><br><span class="line">    if n &lt; 1 &#123;</span><br><span class="line">        print(&quot;汉诺塔的层数不能小于1&quot;)</span><br><span class="line">    &#125; else if (n == 1) &#123;</span><br><span class="line">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        hannio(n: n - 1, x: x, y: z, z: y)</span><br><span class="line">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class="line">        hannio(n: n - 1, x: y, y: x, z: z)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><blockquote><p>分治法的核心思想是“分而治之”，就是把一个规模大、高难度的问题，分解为若干个小规模、低难度的小问题，再针对小的问题，逐一击破。</p></blockquote><h3 id="分治法的使用方法"><a href="#分治法的使用方法" class="headerlink" title="分治法的使用方法"></a>分治法的使用方法</h3><p>当使用分治法解决问题时，一般原问题都需要具备以下几个特征：</p><ul><li><strong>1、难度在降低</strong>：即原问题的解决难度，随着数据的规模的缩小而降低。</li><li><strong>2、问题可分</strong>：原问题可以分解为若干个规模较小的同类型问题。</li><li><strong>3、解可合并</strong>：利用所有子问题的解，可合并出原问题的解。</li><li><strong>4、相互独立</strong>：各个子问题之间相互独立，某个子问题的求解不会影响到另一个子问题。如果子问题之间不独立，则分治法需要重复地解决公共的子问题，造成效率低下的结果。</li></ul><p>分治法的常见实例为二分查找。二分查找的步骤如下：</p><ul><li>1、选择一个标志i将集合L分为二个子集，一般为中位数；</li><li>2、判断标志L(i)是否能够与要查找的值des相等，相等则直接返回结果；</li><li>3、如果不相等，需要判断L(i)与des的大小；</li><li>4、基于判断的结果决定下不步是向左查找还是向右查找。如果向某个方向查找的空间为0，则返回结果未找到。</li><li>5、回到步骤1。<br>二分查找最差的情况是找到最后一个数字才完成，那么此时的最大的复杂度为O(logn)。<br>分治法的例子：在有序数组[1,2,3,4,5,6,7,8,9]中查找8有没有出现过：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">func findValue(_ list:[Int], _ targrt:Int) -&gt; Bool &#123;</span><br><span class="line">    var middle = 0, low = 0, high = list.count - 1</span><br><span class="line">    var isFind = false</span><br><span class="line">    while (low &lt; high) &#123;</span><br><span class="line">        middle = (high + low) / 2</span><br><span class="line">        if list[middle] == targrt &#123;</span><br><span class="line">            print(String(format: &quot;😄找到了,哈哈哈,index:%@&quot;, String(middle)))</span><br><span class="line">            isFind = true</span><br><span class="line">            break</span><br><span class="line">        &#125; else if (list[middle] &gt; targrt) &#123;</span><br><span class="line">            // 说明在左侧 low -&gt; middle - 1之间</span><br><span class="line">            high = middle - 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 说明在右侧 middle -&gt; high 之间</span><br><span class="line">            low = middle + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if !isFind &#123;</span><br><span class="line">        print(&quot;😠没找到，呜呜呜呜&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    return isFind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>规律</strong></p><ul><li>二分法查找的时间复杂度是O(logn)，这也是分治法普遍具备的特征。当约束了时间复杂度为O(logn)或O(nlogn)时，可以考虑分治法是否可行。</li><li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。通常采用while循环加break的代码结构</li><li>二分查找处理的原问题必须是有序的。</li></ul><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><blockquote><p>动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，需要因题而异，仔细分析问题并寻找解决方案。</p></blockquote><h2 id="感谢与推荐"><a href="#感谢与推荐" class="headerlink" title="感谢与推荐"></a>感谢与推荐</h2><ul><li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185#/content" target="_blank" rel="noopener">重学数据结构与算法</a></li><li><a href="https://greyireland.gitbook.io/algorithm-pattern/" target="_blank" rel="noopener">algorithm-pattern</a></li><li><a href="https://books.halfrost.com/leetcode/" target="_blank" rel="noopener">冰霜LeetCodeCookBook</a></li><li><a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">LeetCodeAnimation</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度</title>
      <link href="/2020/08/23/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2020/08/23/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间复杂度，用来度量算法的运行时间，以算法中频度最大的语句来度量，记作: T(n) = O(f(n))，它表示随着输入大小n的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p><p><strong>时间复杂度的计算</strong><br>如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))，通常称为大O推导法。时间复杂度计算的一般法则如下：</p><ul><li>一个顺序结构的代码，时间复杂度是O(1),对于一个for循环，假设循环次数为n, 循环体的时间复杂度为O(m),那么该循环的时间复杂度为O(n * m)。如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func testFunc(_ n: Int) &#123;</span><br><span class="line">    for i in 0..&lt;n &#123;                // 循环次数：n</span><br><span class="line">        print(&quot;index = \(i)&quot;)       // 循环体时间复杂度O(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>上述时间时间复杂度为O(n * 1)，即O(n).</code></pre><ul><li>嵌套循环时，假设循环体的时间复杂度为O(n),各个循环的循环次数为a、b、c…，那么该循环侧时间复杂度为O(n <em> a </em> b <em> c </em> …)，分析时可由内向外分析：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func testFunc(_ n: Int) &#123;</span><br><span class="line">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class="line">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class="line">            print(&quot;i = \(i) --&gt;j = \(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>此时时间复杂度为O(n * n x 1),即O(n^2)。</p><ul><li>对于顺序执行的语句或算法，总的时间复杂度为其中最大的时间复杂度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func testFunc(_ n: Int) &#123;</span><br><span class="line">    // 第一部分时间复杂度为O(n^2)</span><br><span class="line">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class="line">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class="line">            print(&quot;i = \(i) --&gt;j = \(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 第二部分时间复杂度为O(n)</span><br><span class="line">    for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class="line">        print(&quot;index = \(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2).</p><ul><li>对于条件判断语句，总的时间复杂度等于其中<strong>时间复杂度最大的路径</strong>的时间复杂度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func testFunc(_ n: Int) &#123;</span><br><span class="line">    if (n &gt; 3) &#123;</span><br><span class="line">        // 第一条路径复杂度为O(n^2)</span><br><span class="line">        for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class="line">            for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class="line">                print(&quot;i = \(i) --&gt;j = \(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 第二条路径时间复杂度为O(n)</span><br><span class="line">        for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class="line">            print(&quot;index = \(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2)。</p><ul><li>二分查找的时间复杂度是O(logn)。</li></ul><h2 id="时间复杂度的增长率"><a href="#时间复杂度的增长率" class="headerlink" title="时间复杂度的增长率"></a>时间复杂度的增长率</h2><p><img src="./../images/timg.png" alt="timg"></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>算法的空间复杂度是指在算法中所需要的辅助空间单元，而不包括问题的原始数据占用的空间。计算公式为：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://www.jianshu.com/p/f4cca5ce055a" target="_blank" rel="noopener">十分钟搞定时间复杂度</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>focus</title>
      <link href="/2019/05/09/focus/"/>
      <url>/2019/05/09/focus/</url>
      
        <content type="html"><![CDATA[<h2 id="测试-哈哈哈哈😄"><a href="#测试-哈哈哈哈😄" class="headerlink" title="测试 哈哈哈哈😄"></a>测试 哈哈哈哈😄</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
